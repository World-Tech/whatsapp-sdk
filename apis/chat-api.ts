/* tslint:disable */
/* eslint-disable */
/**
 * whatsapp-api
 * Endpoints de whatsapp-api
 *
 * OpenAPI spec version: 1.0
 * Contact: libgot@libgot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ContactDto } from '../models';
import { InlineResponse200 } from '../models';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse201 } from '../models';
import { InlineResponse2XX } from '../models';
import { InlineResponse500 } from '../models';
/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check is WhatsApp Number
         * @summary Check is WhatsApp Number
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIsWhatsAppNumber: async (apikey: string, instance: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apikey' is not null or undefined
            if (apikey === null || apikey === undefined) {
                throw new RequiredError('apikey','Required parameter apikey was null or undefined when calling checkIsWhatsAppNumber.');
            }
            // verify required parameter 'instance' is not null or undefined
            if (instance === null || instance === undefined) {
                throw new RequiredError('instance','Required parameter instance was null or undefined when calling checkIsWhatsAppNumber.');
            }
            const localVarPath = `/chat/whatsappNumbers/{instance}`
                .replace(`{${"instance"}}`, encodeURIComponent(String(instance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apikey !== undefined && apikey !== null) {
                localVarHeaderParameter['apikey'] = String(apikey);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns chats. Each of these properties is optional.
         * @summary Find Chats
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChats: async (apikey: string, instance: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apikey' is not null or undefined
            if (apikey === null || apikey === undefined) {
                throw new RequiredError('apikey','Required parameter apikey was null or undefined when calling findChats.');
            }
            // verify required parameter 'instance' is not null or undefined
            if (instance === null || instance === undefined) {
                throw new RequiredError('instance','Required parameter instance was null or undefined when calling findChats.');
            }
            const localVarPath = `/chat/findChats/{instance}`
                .replace(`{${"instance"}}`, encodeURIComponent(String(instance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apikey !== undefined && apikey !== null) {
                localVarHeaderParameter['apikey'] = String(apikey);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Find Contacts
         * @summary Find Contacts
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findContacts: async (apikey: string, instance: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apikey' is not null or undefined
            if (apikey === null || apikey === undefined) {
                throw new RequiredError('apikey','Required parameter apikey was null or undefined when calling findContacts.');
            }
            // verify required parameter 'instance' is not null or undefined
            if (instance === null || instance === undefined) {
                throw new RequiredError('instance','Required parameter instance was null or undefined when calling findContacts.');
            }
            const localVarPath = `/chat/findContacts/{instance}`
                .replace(`{${"instance"}}`, encodeURIComponent(String(instance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apikey !== undefined && apikey !== null) {
                localVarHeaderParameter['apikey'] = String(apikey);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns messages. Each of these properties is optional.
         * @summary Find Messages
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMessages: async (apikey: string, instance: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apikey' is not null or undefined
            if (apikey === null || apikey === undefined) {
                throw new RequiredError('apikey','Required parameter apikey was null or undefined when calling findMessages.');
            }
            // verify required parameter 'instance' is not null or undefined
            if (instance === null || instance === undefined) {
                throw new RequiredError('instance','Required parameter instance was null or undefined when calling findMessages.');
            }
            const localVarPath = `/chat/findMessages/{instance}`
                .replace(`{${"instance"}}`, encodeURIComponent(String(instance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apikey !== undefined && apikey !== null) {
                localVarHeaderParameter['apikey'] = String(apikey);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the status of updated messages.
         * @summary Find Status Message
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findStatusMessage: async (apikey: string, instance: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apikey' is not null or undefined
            if (apikey === null || apikey === undefined) {
                throw new RequiredError('apikey','Required parameter apikey was null or undefined when calling findStatusMessage.');
            }
            // verify required parameter 'instance' is not null or undefined
            if (instance === null || instance === undefined) {
                throw new RequiredError('instance','Required parameter instance was null or undefined when calling findStatusMessage.');
            }
            const localVarPath = `/chat/findStatusMessage/{instance}`
                .replace(`{${"instance"}}`, encodeURIComponent(String(instance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apikey !== undefined && apikey !== null) {
                localVarHeaderParameter['apikey'] = String(apikey);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Read Messages
         * @summary Read Messages
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsRead: async (apikey: string, instance: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apikey' is not null or undefined
            if (apikey === null || apikey === undefined) {
                throw new RequiredError('apikey','Required parameter apikey was null or undefined when calling markMessageAsRead.');
            }
            // verify required parameter 'instance' is not null or undefined
            if (instance === null || instance === undefined) {
                throw new RequiredError('instance','Required parameter instance was null or undefined when calling markMessageAsRead.');
            }
            const localVarPath = `/chat/markMessageAsRead/{instance}`
                .replace(`{${"instance"}}`, encodeURIComponent(String(instance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apikey !== undefined && apikey !== null) {
                localVarHeaderParameter['apikey'] = String(apikey);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Check is WhatsApp Number
         * @summary Check is WhatsApp Number
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkIsWhatsAppNumber(apikey: string, instance: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200>>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).checkIsWhatsAppNumber(apikey, instance, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns chats. Each of these properties is optional.
         * @summary Find Chats
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findChats(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse2002>>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).findChats(apikey, instance, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Find Contacts
         * @summary Find Contacts
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findContacts(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ContactDto>>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).findContacts(apikey, instance, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns messages. Each of these properties is optional.
         * @summary Find Messages
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findMessages(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).findMessages(apikey, instance, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the status of updated messages.
         * @summary Find Status Message
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findStatusMessage(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).findStatusMessage(apikey, instance, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Read Messages
         * @summary Read Messages
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markMessageAsRead(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse201>>> {
            const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).markMessageAsRead(apikey, instance, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Check is WhatsApp Number
         * @summary Check is WhatsApp Number
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkIsWhatsAppNumber(apikey: string, instance: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200>>> {
            return ChatApiFp(configuration).checkIsWhatsAppNumber(apikey, instance, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns chats. Each of these properties is optional.
         * @summary Find Chats
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findChats(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse2002>>> {
            return ChatApiFp(configuration).findChats(apikey, instance, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Find Contacts
         * @summary Find Contacts
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findContacts(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ContactDto>>> {
            return ChatApiFp(configuration).findContacts(apikey, instance, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns messages. Each of these properties is optional.
         * @summary Find Messages
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findMessages(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return ChatApiFp(configuration).findMessages(apikey, instance, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the status of updated messages.
         * @summary Find Status Message
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findStatusMessage(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ChatApiFp(configuration).findStatusMessage(apikey, instance, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Read Messages
         * @summary Read Messages
         * @param {string} apikey apikey from .env
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markMessageAsRead(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>> {
            return ChatApiFp(configuration).markMessageAsRead(apikey, instance, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     * Check is WhatsApp Number
     * @summary Check is WhatsApp Number
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async checkIsWhatsAppNumber(apikey: string, instance: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200>>> {
        return ChatApiFp(this.configuration).checkIsWhatsAppNumber(apikey, instance, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns chats. Each of these properties is optional.
     * @summary Find Chats
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async findChats(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse2002>>> {
        return ChatApiFp(this.configuration).findChats(apikey, instance, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Find Contacts
     * @summary Find Contacts
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async findContacts(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ContactDto>>> {
        return ChatApiFp(this.configuration).findContacts(apikey, instance, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns messages. Each of these properties is optional.
     * @summary Find Messages
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async findMessages(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return ChatApiFp(this.configuration).findMessages(apikey, instance, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the status of updated messages.
     * @summary Find Status Message
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async findStatusMessage(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ChatApiFp(this.configuration).findStatusMessage(apikey, instance, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Read Messages
     * @summary Read Messages
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public async markMessageAsRead(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse201>> {
        return ChatApiFp(this.configuration).markMessageAsRead(apikey, instance, body, options).then((request) => request(this.axios, this.basePath));
    }
}
