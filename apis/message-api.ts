/* tslint:disable */
/* eslint-disable */
/**
 * whatsapp-api
 * Endpoints de whatsapp-api
 *
 * OpenAPI spec version: 1.0
 * Contact: libgot@libgot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse2011 } from '../models';
import { InlineResponse2012 } from '../models';
/**
 * MessageApi - axios parameter creator
 * @export
 */
export const MessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Send template message
         * @summary Send Template
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTemplate: async (instance: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'instance' is not null or undefined
            if (instance === null || instance === undefined) {
                throw new RequiredError('instance','Required parameter instance was null or undefined when calling sendTemplate.');
            }
            const localVarPath = `/message/sendTemplate/{instance}`
                .replace(`{${"instance"}}`, encodeURIComponent(String(instance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Send conversation message or text message
         * @summary Send Text
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {string} [apikey] apikey from .env
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendText: async (instance: string, body?: any, apikey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'instance' is not null or undefined
            if (instance === null || instance === undefined) {
                throw new RequiredError('instance','Required parameter instance was null or undefined when calling sendText.');
            }
            const localVarPath = `/message/sendText/{instance}`
                .replace(`{${"instance"}}`, encodeURIComponent(String(instance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apikey !== undefined && apikey !== null) {
                localVarHeaderParameter['apikey'] = String(apikey);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Send template message
         * @summary Send Template
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTemplate(instance: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2012>>> {
            const localVarAxiosArgs = await MessageApiAxiosParamCreator(configuration).sendTemplate(instance, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send conversation message or text message
         * @summary Send Text
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {string} [apikey] apikey from .env
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendText(instance: string, body?: any, apikey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2011>>> {
            const localVarAxiosArgs = await MessageApiAxiosParamCreator(configuration).sendText(instance, body, apikey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Send template message
         * @summary Send Template
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTemplate(instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2012>> {
            return MessageApiFp(configuration).sendTemplate(instance, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Send conversation message or text message
         * @summary Send Text
         * @param {string} instance Name of instance
         * @param {any} [body] 
         * @param {string} [apikey] apikey from .env
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendText(instance: string, body?: any, apikey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2011>> {
            return MessageApiFp(configuration).sendText(instance, body, apikey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
    /**
     * Send template message
     * @summary Send Template
     * @param {string} instance Name of instance
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public async sendTemplate(instance: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2012>> {
        return MessageApiFp(this.configuration).sendTemplate(instance, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send conversation message or text message
     * @summary Send Text
     * @param {string} instance Name of instance
     * @param {any} [body] 
     * @param {string} [apikey] apikey from .env
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public async sendText(instance: string, body?: any, apikey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2011>> {
        return MessageApiFp(this.configuration).sendText(instance, body, apikey, options).then((request) => request(this.axios, this.basePath));
    }
}
