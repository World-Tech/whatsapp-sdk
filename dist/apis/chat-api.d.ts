/**
 * whatsapp-api
 * Endpoints de whatsapp-api
 *
 * OpenAPI spec version: 1.0
 * Contact: libgot@libgot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ContactDto } from '../models';
import { InlineResponse200 } from '../models';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse201 } from '../models';
/**
 * ChatApi - axios parameter creator
 * @export
 */
export declare const ChatApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Check is WhatsApp Number
     * @summary Check is WhatsApp Number
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkIsWhatsAppNumber: (apikey: string, instance: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns chats. Each of these properties is optional.
     * @summary Find Chats
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findChats: (instance: string, body?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find Contacts
     * @summary Find Contacts
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findContacts: (apikey: string, instance: string, body?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns messages. Each of these properties is optional.
     * @summary Find Messages
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMessages: (apikey: string, instance: string, body?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the status of updated messages.
     * @summary Find Status Message
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findStatusMessage: (instance: string, body?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Read Messages
     * @summary Read Messages
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markMessageAsRead: (apikey: string, instance: string, body?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ChatApi - functional programming interface
 * @export
 */
export declare const ChatApiFp: (configuration?: Configuration) => {
    /**
     * Check is WhatsApp Number
     * @summary Check is WhatsApp Number
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkIsWhatsAppNumber(apikey: string, instance: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200>>>>;
    /**
     * Returns chats. Each of these properties is optional.
     * @summary Find Chats
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findChats(instance: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse2002>>>>;
    /**
     * Find Contacts
     * @summary Find Contacts
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findContacts(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ContactDto>>>>;
    /**
     * Returns messages. Each of these properties is optional.
     * @summary Find Messages
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMessages(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>>;
    /**
     * Returns the status of updated messages.
     * @summary Find Status Message
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findStatusMessage(instance: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     * Read Messages
     * @summary Read Messages
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markMessageAsRead(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse201>>>;
};
/**
 * ChatApi - factory interface
 * @export
 */
export declare const ChatApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Check is WhatsApp Number
     * @summary Check is WhatsApp Number
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkIsWhatsAppNumber(apikey: string, instance: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200>>>;
    /**
     * Returns chats. Each of these properties is optional.
     * @summary Find Chats
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findChats(instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse2002>>>;
    /**
     * Find Contacts
     * @summary Find Contacts
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findContacts(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ContactDto>>>;
    /**
     * Returns messages. Each of these properties is optional.
     * @summary Find Messages
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMessages(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>>;
    /**
     * Returns the status of updated messages.
     * @summary Find Status Message
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findStatusMessage(instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * Read Messages
     * @summary Read Messages
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markMessageAsRead(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>>;
};
/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export declare class ChatApi extends BaseAPI {
    /**
     * Check is WhatsApp Number
     * @summary Check is WhatsApp Number
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    checkIsWhatsAppNumber(apikey: string, instance: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200>>>;
    /**
     * Returns chats. Each of these properties is optional.
     * @summary Find Chats
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    findChats(instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse2002>>>;
    /**
     * Find Contacts
     * @summary Find Contacts
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    findContacts(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ContactDto>>>;
    /**
     * Returns messages. Each of these properties is optional.
     * @summary Find Messages
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    findMessages(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>>;
    /**
     * Returns the status of updated messages.
     * @summary Find Status Message
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    findStatusMessage(instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * Read Messages
     * @summary Read Messages
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    markMessageAsRead(apikey: string, instance: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>>;
}
