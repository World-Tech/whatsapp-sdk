/**
 * whatsapp-api
 * Endpoints de whatsapp-api
 *
 * OpenAPI spec version: 1.0
 * Contact: libgot@libgot.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { InlineResponse2003 } from '../models';
import { InlineResponse2013 } from '../models';
import { RequestMediaDto } from '../models';
/**
 * S3Api - axios parameter creator
 * @export
 */
export declare const S3ApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get media message
     * @summary Get Media
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {RequestMediaDto} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedia: (apikey: string, instance: string, body?: RequestMediaDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get media message URL
     * @summary Get Media Url
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {RequestMediaDto} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMediaUrl: (apikey: string, instance: string, body?: RequestMediaDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * S3Api - functional programming interface
 * @export
 */
export declare const S3ApiFp: (configuration?: Configuration) => {
    /**
     * Get media message
     * @summary Get Media
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {RequestMediaDto} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedia(apikey: string, instance: string, body?: RequestMediaDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2013>>>;
    /**
     * Get media message URL
     * @summary Get Media Url
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {RequestMediaDto} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMediaUrl(apikey: string, instance: string, body?: RequestMediaDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2003>>>;
};
/**
 * S3Api - factory interface
 * @export
 */
export declare const S3ApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get media message
     * @summary Get Media
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {RequestMediaDto} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedia(apikey: string, instance: string, body?: RequestMediaDto, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2013>>;
    /**
     * Get media message URL
     * @summary Get Media Url
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {RequestMediaDto} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMediaUrl(apikey: string, instance: string, body?: RequestMediaDto, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>>;
};
/**
 * S3Api - object-oriented interface
 * @export
 * @class S3Api
 * @extends {BaseAPI}
 */
export declare class S3Api extends BaseAPI {
    /**
     * Get media message
     * @summary Get Media
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {RequestMediaDto} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3Api
     */
    getMedia(apikey: string, instance: string, body?: RequestMediaDto, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2013>>;
    /**
     * Get media message URL
     * @summary Get Media Url
     * @param {string} apikey apikey from .env
     * @param {string} instance Name of instance
     * @param {RequestMediaDto} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3Api
     */
    getMediaUrl(apikey: string, instance: string, body?: RequestMediaDto, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>>;
}
